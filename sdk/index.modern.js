var a={__proto__:null};function e(){return e=Object.assign?Object.assign.bind():function(a){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(a[r]=t[r])}return a},e.apply(this,arguments)}const t="https://api.zebedee.io",r="/v0/charges",s="/v0/static-charges",n="/v0/payments",i="/v0/withdrawal-requests",c=a=>{const e={};for(const[t,r]of Object.entries(a))null!=r&&(e[t]=r);return e};async function o({url:a,body:t,headers:r}){const s=await fetch(a,{method:"POST",headers:e({"Content-Type":"application/json"},r),body:JSON.stringify(c(t))});if(!s.ok){const a=await s.json();throw{status:s.status,message:a.message||"API request failed"}}return await s.json()}async function d({url:a,headers:t}){const r=await fetch(a,{method:"GET",headers:e({"Content-Type":"application/json"},t)});if(!r.ok){const a=await r.json();throw{status:r.status,message:a.message||"API request failed"}}return await r.json()}class h{constructor(a){this.apiKey=void 0,this.apiBaseUrl=void 0,this.apiCoreHeaders=void 0,this.apiKey=a,this.apiBaseUrl=t,this.apiCoreHeaders={apikey:a}}async createCharge(a){try{const{amount:s,expiresIn:n,internalId:i,description:c,callbackUrl:d}=a;return await o({url:`${t}${r}`,headers:e({},this.apiCoreHeaders),body:{amount:s,expiresIn:n,internalId:i,description:c,callbackUrl:d}})}catch(a){throw a}}async getCharge(a){try{return await d({url:`${t}${r}/${a}`,headers:e({},this.apiCoreHeaders)})}catch(a){throw a}}async createWithdrawalRequest(a){try{const{amount:r,expiresIn:s,internalId:n,callbackUrl:c,description:d}=a;return await o({url:`${t}${i}`,headers:e({},this.apiCoreHeaders),body:{amount:r,expiresIn:s,internalId:n,callbackUrl:c,description:d}})}catch(a){throw a}}async getWithdrawalRequest(a){try{return await d({url:`${t}${i}/${a}`,headers:e({},this.apiCoreHeaders)})}catch(a){throw a}}async validateLightningAddress(a){try{return await d({url:`${t}/v0/ln-address/validate/${a}`,headers:e({},this.apiCoreHeaders)})}catch(a){throw a}}async sendLightningAddressPayment(a){const{amount:r,comment:s,lnAddress:n,internalId:i,callbackUrl:c}=a;return await o({url:`${t}/v0/ln-address/send-payment`,headers:e({},this.apiCoreHeaders),body:{amount:r,comment:s,lnAddress:n,internalId:i,callbackUrl:c}})}async getWallet(){return await d({url:`${t}/v0/wallet`,headers:e({},this.apiCoreHeaders)})}async isSupportedRegion(a){try{return await d({url:`${t}/v0/is-supported-region/${a}`,headers:e({},this.apiCoreHeaders)})}catch(a){throw a}}async fetchZBDProdIps(){try{return await d({url:`${t}/v0/prod-ips`,headers:e({},this.apiCoreHeaders)})}catch(a){throw a}}async btcUsdExchangeRate(){try{return await d({url:`${t}/v0/btcusd`,headers:e({},this.apiCoreHeaders)})}catch(a){throw a}}async internalTransfer(a){try{const{amount:r,receiverWalletId:s}=a;return await o({url:`${t}/v0/internal-transfer`,headers:e({},this.apiCoreHeaders),body:{amount:r,receiverWalletId:s}})}catch(a){throw a}}async sendKeysendPayment(a){try{const{amount:r,pubkey:s,metadata:n,tlvRecords:i,callbackUrl:c}=a;return await o({url:`${t}/v0/keysend-payment`,headers:e({},this.apiCoreHeaders),body:{amount:r,pubkey:s,metadata:n,tlvRecords:i,callbackUrl:c}})}catch(a){throw a}}async payCharge(a){try{const{amount:r,invoice:s,internalId:i,description:c,callbackUrl:d}=a;return await o({url:`${t}${n}`,headers:e({},this.apiCoreHeaders),body:{amount:r,invoice:s,internalId:i,description:c,callbackUrl:d}})}catch(a){throw a}}async getPayment(a){try{return await d({url:`${t}${n}/${a}`,headers:e({},this.apiCoreHeaders)})}catch(a){throw a}}async sendGamertagPayment(a){try{const{amount:r,gamertag:s,description:n}=a;return await o({url:`${t}/v0/gamertag/send-payment`,headers:e({},this.apiCoreHeaders),body:{amount:r,gamertag:s,description:n}})}catch(a){throw a}}async fetchGamertagTransaction(a){try{return await d({url:`${t}/v0/gamertag/transaction/${a}`,headers:e({},this.apiCoreHeaders)})}catch(a){throw a}}async fetchUserIdByGamertag(a){try{return await d({url:`${t}/v0/user-id/gamertag/${a}`,headers:e({},this.apiCoreHeaders)})}catch(a){throw a}}async fetchGamertagByUserId(a){try{return await d({url:`${t}/v0/gamertag/user-id/${a}`,headers:e({},this.apiCoreHeaders)})}catch(a){throw a}}async createGamertagCharge(a){try{const{amount:r,gamertag:s,internalId:n,description:i,callbackUrl:c}=a;return await o({url:`${t}/v0/gamertag/charges`,headers:e({},this.apiCoreHeaders),body:{amount:r,gamertag:s,internalId:n,description:i,callbackUrl:c}})}catch(a){throw a}}async createStaticCharge(a){try{const{allowedSlots:r,minAmount:n,maxAmount:i,description:c,internalId:d,callbackUrl:h,successMessage:l}=a;return await o({url:`${t}${s}`,headers:e({},this.apiCoreHeaders),body:{minAmount:n,maxAmount:i,internalId:d,callbackUrl:h,description:c,allowedSlots:r,successMessage:l}})}catch(a){throw a}}async updateStaticCharge(a,r){try{return await async function({url:a,body:t,headers:r}){const s=await fetch(a,{method:"PATCH",headers:e({"Content-Type":"application/json"},r),body:JSON.stringify(c(t))});if(!s.ok){const a=await s.json();throw{status:s.status,message:a.message||"API request failed"}}return await s.json()}({url:`${t}${s}/${a}`,headers:e({},this.apiCoreHeaders),body:r})}catch(a){throw a}}async getStaticCharge(a){try{return await d({url:`${t}${s}/${a}`,headers:e({},this.apiCoreHeaders)})}catch(a){throw a}}}export{a as types,h as zbd};
//# sourceMappingURL=index.modern.js.map
